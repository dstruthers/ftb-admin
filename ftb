#!/bin/bash

FTB_DIR="/opt/ftb"
FTB_JAR="ftbserver.jar"
FTB_SERVER_LOG="ForgeModLoader-server-0.log"
FTB_JAVA_OPTS="-Xms512M -Xmx4G -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:+AggressiveOpts"
FTB_BACKUP_DIR="/home/minecraft/ftb-backups"
FTB_USER="minecraft"
FTB_SCREEN_SESSION="minecraft-ftb"
FTB_INVOCATION="java $FTB_JAVA_OPTS -jar $FTB_JAR nogui"
FTB_LOG_PREFIX="^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} \[.*\] "

exit_error() {
    echo "$1" >&2
    exit 1
}

run_as() {
    local user="$1"
    local cmd="$2"
    local me="$(whoami)"
    if [ "$user" == "$me" ]; then
	bash -c "$cmd"
    else
	if [ "$me" == "root" ]; then
	    su - "$user" -c "$cmd"
	else
	    if [ "$user" == "root" ]; then
		exit_error "Permission denied: Command must be run as root."
	    else
		exit_error "Permission denied: Command must be run as root or $user."
	    fi
	fi
    fi
}

is_running() {
    if ps ax | grep -v grep | grep "$FTB_SCREEN_SESSION $FTB_INVOCATION" > /dev/null
    then
	return 0
    else
	return 1
    fi
}

find_pid() {
    ps ax | grep -v grep | grep "$FTB_SCREEN_SESSION $FTB_INVOCATION" | awk '{ print $1 }'
}

do_start() {
    if ! is_running; then
	run_as "$FTB_USER" "cd $FTB_DIR && screen -dmS $FTB_SCREEN_SESSION $FTB_INVOCATION"
	echo "Server starting up."
    else
	exit_error "Server is already running."
    fi
}

wait_for_stop() {
    local pid="$1"
    if [ ! -z "$pid" ]; then
	while ps -p "$pid" > /dev/null; do
	    sleep 0.1
	done
    fi
}

do_stop() {
    if is_running; then
	local pid=$(find_pid)
	echo "Attempting to stop server..."
	run_as "$FTB_USER" "kill $pid"
	wait_for_stop $pid
	echo "Stopped."
    else
	exit_error "Server is already stopped."
    fi
}

do_backup() {
    local backupfile="$(date +%F-%H-%M).tar.gz" 
    echo "Backing up server."
    run_as "$FTB_USER" "cd $FTB_DIR && tar cvzfp $FTB_BACKUP_DIR/$backupfile . > /dev/null"
    echo "Backup complete."
}

server_run() {
    if is_running; then
	run_as "$FTB_USER" "screen -p 0 -S $FTB_SCREEN_SESSION -X eval 'stuff \"$1\015\"'"
    else
	exit_error "Server is not currently running."
    fi
}

case "$1" in
    start)
	do_start
        ;;

    stop)
        do_stop
        ;;

    restart)
        do_stop
	sleep 1
        do_start
        ;;

    status)
	if is_running; then
	    echo "Status: running (pid: $(find_pid))"
	    exit 0
	else
	    echo "Status: stopped"
	    exit 1
	fi
	;;

    backup)
	do_backup
	;;

    say)
	server_run "/say $2"
	;;

    who)
	server_run "/list"
	now=$(date +%s)
	line_time=0
	log_player_count="$FTB_LOG_PREFIX\[Minecraft\] There are [0-9]+/[0-9]+ players"
	log_players="$FTB_LOG_PREFIX\[Minecraft\](.*)$"
	get_next_line=0
	while read -t 3 line; do
	    let line_time=$(echo $line | awk '{ print $1, $2 }' | date +%s)
	    if [ "$get_next_line" -ne "0" ] && [[ $line =~ $log_players ]]; then
		break
	    fi

	    if [ $line_time -ge $now ] && [[ $line =~ $log_player_count ]]; then
		let get_next_line=1
	    fi
	done < <(tail -f $FTB_DIR/$FTB_SERVER_LOG)

	if [ ! -z "${BASH_REMATCH[1]}" ]; then
	    echo "The following players are connected:${BASH_REMATCH[1]}"
	    exit 0
	else
	    echo "No players are connected"
	    exit 1
	fi
	;;

    *)
	exit_error "Usage: $0 {start|stop|restart|status|backup|say \$MSG|who}"
esac

